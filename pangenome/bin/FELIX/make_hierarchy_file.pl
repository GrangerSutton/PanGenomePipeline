#!/usr/local/bin/perl -w
#Copy (C) 2013  The J. Craig Venter Institute (JCVI).  All rights reserved
#Written by Granger Sutton, Ph.D.

#This program is free software: you can redistribute it and/or modify
#it under the terms of the GNU General Public License as published by
#the Free Software Foundation, either version 3 of the License, or
#(at your option) any later version.

#This program is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU General Public License for more details.

#You should have received a copy of the GNU General Public License
#along with this program.  If not, see <http://www.gnu.org/licenses/>.

#Revision notes
my $commandline = join (" ", @ARGV);
my $prog = $0;
$prog =~ s/.*\///;

use strict;
use warnings;
use Getopt::Std;
getopts ('Dh');
our ($opt_D,$opt_h);

## use boolean logic:  TRUE = 1, FALSE = 0

my $version = "ver1.0";
my $DEBUG;
my @batch_array = ();
if ($opt_D) {$DEBUG = 1;} else { $DEBUG = 0; } # Debug mode is off as default.
if ($opt_h) { &option_help; } # quit with help menu

########################################  M A I N  #####################################################
{ # read in two column tab delimited format: column 1 is genome identifier, column 2 is level1 batch number
   
    while (my $line = <STDIN>)  {
	chomp $line;
	(my $genome_id, my $batch_num) = split(/\t/, $line);  # split the scalar $line on tab

	if ($batch_array[$batch_num]) {
	    $batch_array[$batch_num] .= "," . $genome_id;
	} else {
	    $batch_array[$batch_num] = "L1B" . $batch_num . "(" . $genome_id;
	}
    }
    my $level_two = "";
    foreach my $batch (@batch_array) {
	if ($batch) {
	    $batch .= ")";
	    print "$batch\n";
	    (my $level_one, my $rest) = split(/\(/, $batch);
	    if ($level_two) {
		$level_two .= "," . $level_one;
	    } else {
		$level_two = "L2B1(" . $level_one;
	    }
	}
    }
    $level_two .= ")";
    print "$level_two\n";
}

sub option_help {

   system("clear");
   print STDERR <<_EOB_;
$prog  - read in a two column tab delimited file and output a heirarchy_file for PanOCT
Copy (C) 2018  The J. Craig Venter Institute (JCVI).  All rights reserved

License:   This program is free software: you can redistribute it and/or modify
           it under the terms of the GNU General Public License as published by
           the Free Software Foundation, either version 3 of the License, or
           (at your option) any later version.

           This program is distributed in the hope that it will be useful,
           but WITHOUT ANY WARRANTY; without even the implied warranty of
           MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
           GNU General Public License for more details.

           You should have received a copy of the GNU General Public License
           along with this program.  If not, see <http://www.gnu.org/licenses/>.

Citation:  Derrick E. Fouts, Lauren Brinkac, Erin Beck, Jason Inman, and Granger Sutton (2011) "PanOCT: Automated Clustering of Orthologs using 
           Conserved Gene Neighborhood for Pan-Genomic Analysis of Bacterial Strains and Closely Related Species" Nucleic Acids Res. 2012 Dec;40(22).

  Usage: $prog <options>
Example: $prog < input_file > output_file
Version: $version
 Option:
     -h: print this help page
     -D: DEBUG MODE (DEFAULT = off)
 Output: lines from the matchtable for the clusters specified plus a summary line

 Authors: Granger Sutton, Ph.D.
  Date: May 15, 2019; last revised   May 15, 2019
  Input: The input files are primarily files generated by a panoct run and must be consistent with and across that run.
$prog requires a sinlge two column tab delimited input file

Column 1: Genome Identifier, Column 2: level1 batch number this genome belongs in

The output goes to STDOUT and is the heirarchy file for PanOCT.
_EOB_
    exit;
}

exit(0);
